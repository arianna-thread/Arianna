package fr.eurecom.mobserv.arianna.model;

import java.util.List;


import android.content.Context;
import android.database.sqlite.SQLiteDatabase;

public abstract class Model {

	public static final int DATABASE_VERSION = 1;
	public static final String DATABASE_NAME = "Arianna.db";
	
	public static final String COMMA_SEP = ",";
	public static final String TEXT_TYPE = " TEXT";
	public static final String INT_TYPE = " INTEGER";
	public static final String UNIQUE = " UNIQUE";
	public static final String COORDINATE_TYPE = " REAL";
	public static final String PRIMARY_KEY = " INTEGER PRIMARY KEY AUTOINCREMENT";
	
	// TODO implementare query create
	public static final String SQL_CREATE_ENTRIES = "";

	// TODO implementare query delete (drop? truncate?)
	public static final String SQL_DELETE_ENTRIES = null;
	public static final String COLUMN_NAME_URI = "uri";
	private Context context;

	private String uri;

	public Model(Context context, String uri) {
		this.context = context;
		this.uri = uri;
	}

	/**
	 * Method for retrieving a model given its unique URI
	 * 
	 * @param uri
	 * @return the model requested
	 */
	public static Model getByURI(String uri) {
		// TODO Implementare
		return null;
	}

	public static List<Model> getByParam() {
		// TODO decidere se serve e implementare
		return null;
	}

	/**
	 * Save or update the entity on the db
	 * 
	 * @return false on failure, true on success
	 */
	public abstract boolean save();

	/**
	 * Delete the entity from the db
	 * 
	 * @return false on failure, true on success
	 */
	public boolean delete() {
		SQLiteDatabase db = DbHelper.getInstance(context).getWritableDatabase();
		String whereClause = COLUMN_NAME_URI + " = ?";
		String[] whereArgs = { this.getUri() };
		int numRowAffected = db.delete(this.getTableName(), whereClause,
				whereArgs);

		if (numRowAffected != 1) {
			return false;
		}
		return true;
	}

	protected abstract String getTableName();

	/**
	 * Used by Model.save when entry is already in the db
	 * 
	 * @return false on failure, true on success
	 */
	protected boolean update() {

		// TODO implementare
		return false;
	}

	/********************************************************
	 * * GETTER AND SETTERS * *
	 ********************************************************/

	public Context getContext() {
		return context;
	}

	public void setContext(Context context) {
		this.context = context;
	}

	public String getUri() {
		return uri;
	}

	public void setUri(String uri) {
		this.uri = uri;
	}

}
