package fr.eurecom.mobserv.arianna.model;

import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.provider.BaseColumns;

/**
 * @author dani
 *
 */
public class Path extends Model implements BaseColumns{
	public static final String TABLE_NAME = "path";
	public static final String COLUMN_NAME_TITLE = "title";
    public static final String COLUMN_NAME_DESC = "description";
    
    public static final String SQL_CREATE_TABLE =
    	    "CREATE TABLE " + Path.TABLE_NAME + " (" +
			    Path._ID + Model.PRIMARY_KEY + Model.COMMA_SEP +
			    Model.COLUMN_NAME_URI + Model.TEXT_TYPE + Model.COMMA_SEP +
			    Path.COLUMN_NAME_TITLE + Model.TEXT_TYPE + Model.COMMA_SEP +
			    Path.COLUMN_NAME_DESC + Model.TEXT_TYPE  + Model.COMMA_SEP +
			    ")";
    
    private String title;
    private String description;
    private List<PointOfInterest> POIs;
    
    /**
     * Path of PointOfInterest
     * @param context
     * @param uri
	 * @param title
	 * @param description
	 */
	public Path(Context context, String uri, String title, String description) {
		super(context,uri);
		this.title = title;
		this.description = description;
	}

	/**
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}


	/**
	 * @param title the title to set
	 */
	public void setTitle(String title) {
		this.title = title;
	}


	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}


	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	
	
	/**
	 * @return the POIs
	 */
	public List<PointOfInterest> getPOIs() {
		return POIs;
	}

	/**
	 * @param POIs the POIs to set
	 */
	public void setPOIs(List<PointOfInterest> pOIs) {
		POIs = pOIs;
	}

	@Override
	public boolean save() {
		// Gets the data repository in write mode
		SQLiteDatabase db = DbHelper.getInstance(this.getContext()).getWritableDatabase();
	
		// Create a new map of values, where column names are the keys
		ContentValues values = new ContentValues();
		values.put(Model.COLUMN_NAME_URI,this.getUri());
		values.put(Path.COLUMN_NAME_TITLE,this.getTitle());
		values.put(Path.COLUMN_NAME_DESC,this.getDescription());
		
		// Insert the new row, returning the primary key value of the new row
		long newRowId;
		newRowId = db.insert(
		         Path.TABLE_NAME,
		         null,
		         values);
		return newRowId>=0;
	}

	@Override
	protected String getTableName() {
		return TABLE_NAME;
	}
    
}
