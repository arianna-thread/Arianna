package fr.eurecom.mobserv.arianna;

import java.lang.reflect.Type;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import fr.eurecom.mobserv.arianna.mapobject.GPoint;
import fr.eurecom.mobserv.arianna.mapobject.JavascriptState;
import fr.eurecom.mobserv.arianna.model.*;

import android.content.Context;
import android.content.Intent;
import android.graphics.Point;
import android.view.View;
import android.webkit.JavascriptInterface;
import android.widget.Toast;

public class JavaScriptInterface {
	MapActivity mContext;
	Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation()
			.create();// new Gson();

	// public PointOfInterest[] punti = {
	// new PointOfInterest ("1","pirla",new Point(80, 830)),
	// new PointOfInterest ("2","pirla",new Point(308, 830)),
	// new PointOfInterest ("3","pirla",new Point(308, 392)),
	// new PointOfInterest ("4","pirla",new Point(185, 392)),
	// };

	JavaScriptInterface(MapActivity c) {
		mContext = c;
	}

	@JavascriptInterface
	public String returnPath() {
		// Path p = new Path(punti);
		// return gson.toJson(p);
		return null;
	}

	@JavascriptInterface
	public String returnPois() {
		// return gson.toJson(punti);
		return null;
	}

	@JavascriptInterface
	public String asd() {
		return "puppa";
	}

	@JavascriptInterface
	public void showToast(String toast) {
		Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();
	}

	@JavascriptInterface
	public void startDetail(String uriPoiSelected) {
		Intent i = new Intent(mContext, PointOfInterestDetail.class);
		i.putExtra(DashboardActivity.EXTRA_URI, uriPoiSelected);
		i.putExtra(DashboardActivity.EXTRA_LAUNCHER,
				DashboardActivity.LAUNCHER_MAP);
		Toast.makeText(mContext, uriPoiSelected, Toast.LENGTH_SHORT).show();
		mContext.startActivity(i);
	}

	@JavascriptInterface
	public String getInitPois() {

		ApplicationState state = ApplicationState.getInstance();
		MapLevel curr = state.getCurrentLevel();
		List<PointOfInterest> listPoi = new LinkedList<PointOfInterest>();
		for (NavigationNode nn : curr.getNavigationNodes().values()) {
			listPoi.addAll(nn.getPois().values());
		}

		String toReturn = gson.toJson(listPoi);
		return toReturn;
	}

	@JavascriptInterface
	public String getPath() {
		String toReturn;
		ApplicationState state = ApplicationState.getInstance();
		if (state.getCurrentPath() == null) {
			return null;
		}
		List<GPoint> gPath = new LinkedList<GPoint>();
		List<NavigationLink> navList = state.getCurrentPath()
				.getNavigationList();
		for (NavigationLink n : navList) {
			Type collectionType = new TypeToken<LinkedList<GPoint>>() {
			}.getType();
			LinkedList<GPoint> points = gson.fromJson(n.getPoints(),
					collectionType);
			gPath.addAll(points);
		}
		toReturn = gson.toJson(gPath);
		return toReturn;
	}

	@JavascriptInterface
	public String clickNext() throws Exception {
		ApplicationState state = ApplicationState.getInstance();
		JavascriptState js = null;
		if (state.getCurrentPath() == null) {
			if (state.getLinksToDestination() != null) {
				// NO PATH, SI DESTINAZIONE
				List<NavigationLink> navlinks = state.getLinksToDestination();
				NavigationNode to = null;
				int counter = 0;
				for (NavigationLink nl : navlinks) {
					counter++;
					if (nl.getFromNode().equals(state.getCurrentNode())) {
						to = nl.getToNode();
						break;
					}
				}
				state.setCurrentNode(to);
				js = new JavascriptState();
				js.setCurrNode(new GPoint(to.getX(), to.getY()));
				if (counter == navlinks.size()) {
					mContext.setNextVisibility(View.INVISIBLE);
				} else {
					mContext.setNextVisibility(View.VISIBLE);
				}
			} else {
				// TODO rimuovere in produzione
				throw new Exception("Destination unknown");
			}

		} else {
			// IN PATH
			List<PointOfInterest> pois = state.getCurrentPath().getPOIs();
			PointOfInterest toPoi = null;
			PointOfInterest nextPoi = null;
			int counter = 0;
			boolean trovato = false, trovatoSucc = false;
			for (PointOfInterest poi : pois) {
				counter++;
				if (trovatoSucc) {
					nextPoi = poi;
					trovato = false;
					trovatoSucc = false;
					break;
				}
				if (trovato) {
					toPoi = poi;
					trovato = false;
					trovatoSucc = true;
				}
				PointOfInterest curr = state.getCurrentPointOfInterest();
				if (curr.equals(poi)) {
					trovato = true;
				}
			}
			js = new JavascriptState();
			js.setCurrNode(new GPoint(toPoi.getNavNode().getX(), toPoi
					.getNavNode().getY()));
			js.setCurr(toPoi.getUri());
			js.setSucc(nextPoi.getUri());
			state.setCurrentPointOfInterest(toPoi);
//			if (counter == pois.size()) {
//				mContext.setNextVisibility(View.INVISIBLE);
//			} else {
//				mContext.setNextVisibility(View.VISIBLE);
//			}

		}

		return gson.toJson(js);
	}

	private String getJSONPathToNextPoi() {
		// TODO da fare
		return null;
	}

	// public void openAndroidDialog(){
	// AlertDialog.Builder myDialog
	// = new AlertDialog.Builder(MainActivity.this);
	// myDialog.setTitle("DANGER!");
	// myDialog.setMessage("You can do what you want!");
	// myDialog.setPositiveButton("ON", null);
	// myDialog.show();
	// }

}