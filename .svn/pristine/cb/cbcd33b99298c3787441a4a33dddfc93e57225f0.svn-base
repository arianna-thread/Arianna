package fr.eurecom.mobserv.arianna;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import junit.framework.Assert;

import fr.eurecom.mobserv.arianna.model.Category;
import fr.eurecom.mobserv.arianna.model.DbHelper;
import fr.eurecom.mobserv.arianna.model.Event;
import fr.eurecom.mobserv.arianna.model.MapLevel;
import fr.eurecom.mobserv.arianna.model.Model;
import fr.eurecom.mobserv.arianna.model.NavigationLink;
import fr.eurecom.mobserv.arianna.model.NavigationNode;
import fr.eurecom.mobserv.arianna.model.Path;
import fr.eurecom.mobserv.arianna.model.PointOfInterest;
import android.os.Bundle;
import android.app.Activity;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;
import android.view.Menu;

public class Dashboard extends Activity {
	public final static String EXTRA_URI = "fr.eurecom.mobserv.arianna.URI";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_dashboard);
		this.testDb();
		this.loadDb();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_dashboard, menu);
		return true;

	}

	@Override
	protected void onResume() {
		super.onResume();
	}

	public void loadDb() {
		Event event = (Event) Model.getByURI(Event.class, "E0",
				getApplicationContext());
		Collection<MapLevel> l = event.getLevels().values();
		for (MapLevel mapLevel : event.getLevels().values()) {
			for (NavigationNode navigationNode : mapLevel.getNavigationNodes().values()) {
				Collection<NavigationLink> ins = navigationNode.getInLinks().values();
				Collection<NavigationLink> outs = navigationNode.getOutLinks().values();
				Collection<PointOfInterest> pois = navigationNode.getPois().values();
			}
			for (NavigationLink navigationLink : mapLevel.getNavigationLinks()
					.values()) {
				navigationLink.getFromNode();
				navigationLink.getToNode();

			}
		}
		for (Path path : event.getPaths().values()) {
			PointOfInterest prec = null;
			for (PointOfInterest poi : path.getPOIs()) {
				NavigationNode n = poi.getNavNode();
				if (prec != null) {
					List<NavigationNode> navPath = Model.getShortestPath(
							prec.getNavNode(), poi.getNavNode());
					for (NavigationNode navigationNode : navPath) {
						navigationNode.getUri();
					}
				}
				prec = poi;
			}
		}

	}

	public void testDb() {
		Log.w("ARIANNA", "starting testing mode");
		try {
			SQLiteDatabase db = DbHelper.getInstance(getApplicationContext())
					.getWritableDatabase();
			// DbHelper.getInstance(getApplicationContext()).onCreate(db);
			DbHelper.getInstance(getApplicationContext()).onUpgrade(db, 0, 0);
		} catch (Exception e) {
			Log.w("ARIANNA", e);
		}

		/**
		 * EVENT
		 */
		Event[] events = { new Event(getApplicationContext(), "E0", "name",
				"address", "image", "mail", "phoneNumber") };
		for (Event event : events) {
			Assert.assertTrue(event.save());
		}
		for (Event event : events) {
			Event eventTest = (Event) Model.getByURI(Event.class,
					event.getUri(), getApplicationContext());
			Assert.assertTrue(event != null);
			Assert.assertTrue(eventTest != null);
			Assert.assertTrue(eventTest.equals(event));
			Assert.assertTrue(eventTest.hashCode() == event.hashCode());
		}
		/**
		 * MAP LEVEL
		 */
		MapLevel[] maps = {
				new MapLevel(getApplicationContext(), "M0", "name",
						"map_image", events[0]),
				new MapLevel(getApplicationContext(), "M1", "name",
						"map_image", events[0]),
				new MapLevel(getApplicationContext(), "M2", "name",
						"map_image", events[0]) };
		for (MapLevel mapLevel : maps) {
			Assert.assertTrue(mapLevel.save());
		}
		for (MapLevel mapLevel : maps) {
			MapLevel mapTest = (MapLevel) Model.getByURI(MapLevel.class,
					mapLevel.getUri(), getApplicationContext());
			Assert.assertTrue(mapTest.equals(mapLevel));
			Assert.assertTrue(mapTest.hashCode() == mapLevel.hashCode());
		}
		/**
		 * NAV NODE
		 */
		NavigationNode[] navNodes = {
				new NavigationNode(getApplicationContext(), "NN0", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN1", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN2", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN3", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN4", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN5", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN6", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN7", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN8", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN9", 0, 0,
						maps[0]),
				new NavigationNode(getApplicationContext(), "NN10", 0, 0,
						maps[0]), };
		for (NavigationNode navigationNode : navNodes) {
			Assert.assertTrue(navigationNode.save());
		}
		for (NavigationNode navigationNode : navNodes) {
			NavigationNode nodeTest = (NavigationNode) Model.getByURI(
					NavigationNode.class, navigationNode.getUri(),
					getApplicationContext());
			Assert.assertTrue(nodeTest.equals(navigationNode));
			Assert.assertTrue(nodeTest.hashCode() == navigationNode.hashCode());
		}

		/**
		 * NAV LINK
		 */
		NavigationLink[] navLinks = {
				new NavigationLink(getApplicationContext(), "NL0", navNodes[0],
						navNodes[1], maps[0], "points"),
				new NavigationLink(getApplicationContext(), "NL1", navNodes[1],
						navNodes[2], maps[0], "points"), };
		for (NavigationLink navigationLink : navLinks) {
			Assert.assertTrue(navigationLink.save());
		}
		for (NavigationLink navigationLink : navLinks) {
			NavigationLink linkTest = (NavigationLink) Model.getByURI(
					NavigationLink.class, navigationLink.getUri(),
					getApplicationContext());
			Assert.assertTrue(linkTest.equals(navigationLink));
			Assert.assertTrue(linkTest.hashCode() == navigationLink.hashCode());

		}
		/**
		 * CATEGORY
		 */
		Category[] cats = {
				new Category(getApplicationContext(), "C0", "Quadro",
						"icon_path", false),
				new Category(getApplicationContext(), "C1", "WC", "icon_path",
						true) };
		for (Category category : cats) {
			Assert.assertTrue(category.save());
		}
		for (Category category : cats) {
			Category catTest = (Category) Model.getByURI(Category.class,
					category.getUri(), getApplicationContext());
			Assert.assertTrue(catTest.equals(category));
			Assert.assertTrue(catTest.hashCode() == category.hashCode());
		}
		/**
		 * POI
		 */
		PointOfInterest[] pois = {
				new PointOfInterest(getApplicationContext(), "P0", "Gioconda",
						"subtitle", "description", "image", cats[0],
						navNodes[0]),
				new PointOfInterest(getApplicationContext(), "P1",
						"Vergine delle Rocce", "subtitle", "description",
						"image", cats[0], navNodes[0]),
				new PointOfInterest(getApplicationContext(), "P2", "Dama",
						"subtitle", "description", "image", cats[0],
						navNodes[1]),
				new PointOfInterest(getApplicationContext(), "P3", "Bagno",
						"subtitle", "description", "image", cats[1],
						navNodes[2]) };
		for (PointOfInterest pointOfInterest : pois) {
			Assert.assertTrue(pointOfInterest.save());
		}
		for (PointOfInterest pointOfInterest : pois) {
			PointOfInterest poiTest = (PointOfInterest) Model.getByURI(
					PointOfInterest.class, pointOfInterest.getUri(),
					getApplicationContext());
			Assert.assertTrue(poiTest.equals(pointOfInterest));
			Assert.assertTrue(poiTest.hashCode() == pointOfInterest.hashCode());
		}
		/**
		 * PATH
		 */
		Path[] paths = { new Path(getApplicationContext(), "PATH0", "Leonardo",
				"descrizione", events[0]) };
		List<PointOfInterest> l = new ArrayList<PointOfInterest>();
		l.add(pois[0]);
		l.add(pois[2]);
		paths[0].setPOIs(l);
		Assert.assertTrue(l.equals(paths[0].getPOIs()));
		for (Path path : paths) {
			Assert.assertTrue(path.save());
		}
		for (Path path : paths) {
			Path pathTest = (Path) Model.getByURI(Path.class, path.getUri(),
					getApplicationContext());
			Assert.assertTrue(pathTest.equals(path));
			Assert.assertTrue(pathTest.hashCode() == path.hashCode());
		}
		/**
		 * TEST query by Param
		 */
		Map<String, MapLevel> lm = (Map) Model.getByParam(MapLevel.class,
				MapLevel.COLUMN_NAME_EVENT_URI, events[0].getUri(),
				getApplicationContext());
		for (MapLevel mapl : lm.values()) {
			// MapLevel mapl=(MapLevel) model;
			MapLevel mapl2 = (MapLevel) Model.getByURI(MapLevel.class,
					mapl.getUri(), getApplicationContext());
			Assert.assertTrue(mapl.equals(mapl2));
			Assert.assertTrue(mapl.hashCode() == mapl2.hashCode());

		}
	}

}