package fr.eurecom.mobserv.arianna.model;

import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.provider.BaseColumns;

public class Event extends Model implements BaseColumns {
	public final static String TABLE_NAME = "company";
	public final static String COLUMN_NAME_NAME = "name";
	public final static String COLUMN_NAME_ADDRESS = "address";
	public final static String COLUMN_NAME_IMAGE = "image";
	public final static String COLUMN_NAME_MAIL = "mail";
	public final static String COLUMN_NAME_PHONE_NUMBER = "phone_number";
	public static final String[] COLUMNS_NAME = { Model.COLUMN_NAME_URI,
			COLUMN_NAME_NAME, COLUMN_NAME_ADDRESS, COLUMN_NAME_IMAGE,
			COLUMN_NAME_MAIL, COLUMN_NAME_PHONE_NUMBER };

	public final static String SQL_CREATE_TABLE = "CREATE TABLE " + TABLE_NAME
			+ " (" + _ID + PRIMARY_KEY + COMMA_SEP 
			+ COLUMN_NAME_URI + TEXT_TYPE + UNIQUE + COMMA_SEP 
			+ COLUMN_NAME_NAME + TEXT_TYPE + COMMA_SEP
			+ COLUMN_NAME_ADDRESS + TEXT_TYPE + COMMA_SEP 
			+ COLUMN_NAME_IMAGE+ TEXT_TYPE + COMMA_SEP 
			+ COLUMN_NAME_MAIL + TEXT_TYPE + COMMA_SEP
			+ COLUMN_NAME_PHONE_NUMBER + TEXT_TYPE + " )";

	private String name;
	private String address;
	// TODO immagine ? controllare tutta la classe
	private String image;
	private String mail;
	private String phoneNumber;
	private List<MapLevel> levels;

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param context
	 * @param uri
	 * @param name
	 * @param address
	 * @param image
	 * @param mail
	 * @param phoneNumber
	 * @param levels
	 */
	public Event(Context context, String uri, String name, String address,
			String image, String mail, String phoneNumber, List<MapLevel> levels) {
		super(context, uri);
		this.name = name;
		this.address = address;
		this.image = image;
		this.mail = mail;
		this.phoneNumber = phoneNumber;
		this.levels = levels;
	}
	
	/**
	 * @param context
	 * @param cursor result from query to map DB entry and JAVA object
	 */
	public Event(Context context, Cursor cursor) {
		super(context,cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME_URI)));
		this.name = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME_NAME));
		this.address = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME_ADDRESS));
		this.image = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME_IMAGE));
		this.mail = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME_MAIL));
		this.phoneNumber = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME_PHONE_NUMBER));
		/**TODO levels è ottenuto da un'altra query **/
	}
	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the address
	 */
	public String getAddress() {
		return address;
	}

	/**
	 * @param addres the address to set
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * @return the image
	 */
	public String getImage() {
		return image;
	}

	/**
	 * @param image
	 *            the image to set
	 */
	public void setImage(String image) {
		this.image = image;
	}

	/**
	 * @return the mail
	 */
	public String getMail() {
		return mail;
	}

	/**
	 * @param mail
	 *            the mail to set
	 */
	public void setMail(String mail) {
		this.mail = mail;
	}

	/**
	 * @return the phoneNumber
	 */
	public String getPhoneNumber() {
		return phoneNumber;
	}

	/**
	 * @param phoneNumber
	 *            the phoneNumber to set
	 */
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	/**
	 * @return the levels
	 */
	public List<MapLevel> getLevels() {
		return levels;
	}

	/**
	 * @param levels
	 *            the levels to set
	 */
	public void setLevels(List<MapLevel> levels) {
		this.levels = levels;
	}

	@Override
	public boolean save() {
		SQLiteDatabase db = DbHelper.getInstance(this.getContext())
				.getWritableDatabase();

		// Create a new map of values, where column names are the keys
		ContentValues values = new ContentValues();
		values.put(Model.COLUMN_NAME_URI, this.getUri());
		values.put(COLUMN_NAME_NAME, this.getName());
		values.put(COLUMN_NAME_ADDRESS, this.getAddress());
		// values.put(COLUMN_NAME_IMAGE,this.getImage());
		values.put(COLUMN_NAME_MAIL, this.getMail());
		values.put(COLUMN_NAME_PHONE_NUMBER, this.getPhoneNumber());

		// Insert the new row, returning the primary key value of the new row
		long newRowId;
		newRowId = db.insert(Path.TABLE_NAME, null, values);
		return newRowId >= 0;
	}

	@Override
	protected String getTableName() {
		return TABLE_NAME;
	}

}
