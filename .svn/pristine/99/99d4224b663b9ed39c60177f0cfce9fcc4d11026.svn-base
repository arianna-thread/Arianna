package fr.eurecom.mobserv.arianna.model;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.provider.BaseColumns;

/**
 * @author uccio
 *
 */
public class NavigationNode extends Model implements BaseColumns {
	
	public static final String TABLE_NAME = "navigation_node";
    public static final String COLUMN_NAME_X = "x";
    public static final String COLUMN_NAME_Y = "y";
    public static final String COLUMN_NAME_MAP_LEVEL = "map_level";
    public static final String[] COLUMNS_NAME={Model.COLUMN_NAME_URI,COLUMN_NAME_X,COLUMN_NAME_Y,COLUMN_NAME_MAP_LEVEL};
	
    public static final String SQL_CREATE_TABLE = 
    		"CREATE TABLE " + NavigationNode.TABLE_NAME + " ("
    		+ NavigationNode._ID + Model.PRIMARY_KEY + Model.COMMA_SEP
    		+ Model.COLUMN_NAME_URI + Model.TEXT_TYPE+UNIQUE + Model.COMMA_SEP
    		+ NavigationNode.COLUMN_NAME_X + Model.COORDINATE_TYPE + Model.COMMA_SEP
    		+ NavigationNode.COLUMN_NAME_Y + Model.COORDINATE_TYPE+ Model.COMMA_SEP
    		+ NavigationNode.COLUMN_NAME_MAP_LEVEL + Model.TEXT_TYPE + COMMA_SEP
    		+ "FOREIGN KEY("+NavigationNode.COLUMN_NAME_MAP_LEVEL+") REFERENCES "+ MapLevel.TABLE_NAME +"("+Model.COLUMN_NAME_URI+")"+ 
    		")";
    
    
    private double x;
    private double y;
    
    private String mapLevel;
	/**
	 * @return the x
	 */
	public double getX() {
		return x;
	}
	/**
	 * @param x the x to set
	 */
	public void setX(double x) {
		this.x = x;
	}
	/**
	 * @return the y
	 */
	public double getY() {
		return y;
	}
	/**
	 * @param y the y to set
	 */
	public void setY(double y) {
		this.y = y;
	}
	/**
	 * @return the mapLevel
	 */
	public String getMapLevel() {
		return mapLevel;
	}
	/**
	 * @param mapLevel the mapLevel to set
	 */
	public void setMapLevel(String mapLevel) {
		this.mapLevel = mapLevel;
	}
	
	/**
	 * 	
	 * @param context
	 * @param URI
	 * @param x horizontal coordinate of the navigation node on the map level image (origin is on the upper-left corner) 
	 * @param y vertical coordinate of the navigation node on the map level image (origin is on the upper-left corner) 
	 * @param mapLevel URI of the map level where the navigation node is situated  
	 */
	public NavigationNode(Context context, String URI, double x, double y, String mapLevel) {
		super(context, URI);
		this.x = x;
		this.y = y;
		this.mapLevel = mapLevel;
	}
	
	/**
	 * @param context
	 * @param cursor result from query to map DB entry and JAVA object
	 */
	public NavigationNode(Context context, Cursor cursor) {
		super(context,cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME_URI)));
		this.x = cursor.getDouble(cursor.getColumnIndexOrThrow(COLUMN_NAME_X));
		this.y=cursor.getDouble(cursor.getColumnIndexOrThrow(COLUMN_NAME_Y));
		this.mapLevel = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME_MAP_LEVEL));;
	}
	
	@Override
	public boolean save() {
		// Gets the data repository in write mode
		SQLiteDatabase db = DbHelper.getInstance(this.getContext()).getWritableDatabase();
	
		// Create a new map of values, where column names are the keys
		ContentValues values = new ContentValues();
		values.put(Model.COLUMN_NAME_URI,this.getUri());
		values.put(NavigationNode.COLUMN_NAME_X, this.getX());
		values.put(NavigationNode.COLUMN_NAME_Y, this.getY());
		values.put(NavigationNode.COLUMN_NAME_MAP_LEVEL, this.getMapLevel());
		
		// Insert the new row, returning the primary key value of the new row
		long newRowId;
		newRowId = db.insert(
		         NavigationNode.TABLE_NAME,
		         null,
		         values);
		return newRowId>=0;
	}
	
	@Override
	protected String getTableName() {
		return NavigationNode.TABLE_NAME;
	}

    

}
