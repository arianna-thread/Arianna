package fr.eurecom.mobserv.arianna;

import java.util.List;


import fr.eurecom.mobserv.arianna.model.Event;
import fr.eurecom.mobserv.arianna.model.MapLevel;
import fr.eurecom.mobserv.arianna.model.Model;
import fr.eurecom.mobserv.arianna.model.NavigationLink;
import fr.eurecom.mobserv.arianna.model.NavigationNode;
import fr.eurecom.mobserv.arianna.model.Path;
import fr.eurecom.mobserv.arianna.model.PointOfInterest;

public class ApplicationState {

	
	private static ApplicationState instance = null;
	
	private PointOfInterest currentPointOfInterest = null;
	private Path currentPath = null;
	private MapLevel currentLevel = null;
	private Event currentEvent = null;
	private NavigationNode currentNode = null;
	private List<NavigationLink> linksToDestination = null;


	private ApplicationState() {
		currentEvent = (Event) Event.getByURI(Event.class, "E0", null);
		currentLevel = currentEvent.getLevels().values().iterator().next();
		//TODO inizializzazioni di test
		setCurrentPath(currentEvent.getPaths().values().iterator().next());
	}

	/**
	 * @return the currentNode
	 */
	public NavigationNode getCurrentNode() {
		return currentNode;
	}

	/**
	 * @param currentNode the currentNode to set
	 */
	public void setCurrentNode(NavigationNode currentNode) {
		this.currentNode = currentNode;
	}

	public static ApplicationState getInstance() {
		if (instance == null) {
			instance = new ApplicationState();
		}
		return instance;
	}
	

	

	/**
	 * @return the currentEvent
	 */
	public Event getCurrentEvent() {
		return currentEvent;
	}

	/**
	 * @param currentEvent the currentEvent to set
	 */
	public void setCurrentEvent(Event currentEvent) {
		this.currentEvent = currentEvent;
	}

	/**
	 * @return the currentLevel
	 */
	public MapLevel getCurrentLevel() {
		return currentLevel;
	}

	/**
	 * @param currentLevel the currentLevel to set
	 */
	public void setCurrentLevel(MapLevel currentLevel) {
		this.currentLevel = currentLevel;
	}

	/**
	 * @return the current PointOfInterest
	 */
	public PointOfInterest getCurrentPointOfInterest() {
		return currentPointOfInterest;
	}

	
	/**
	 * @param currentPointOfInterest the current PointOfInterest to set
	 */
	public void setCurrentPointOfInterest(PointOfInterest currentPointOfInterest) {
		this.currentPointOfInterest = currentPointOfInterest;
	}

	/**
	 * @return the current Path
	 */
	public Path getCurrentPath() {
		return currentPath;
	}

	/**
	 * @param currentPath the current Path to set
	 */
	public void setCurrentPath(Path currentPath) {
		this.currentPath = currentPath;
		setCurrentPointOfInterest(currentPath.getPOIs().get(0));
	}
	
	public void setCurrentDestination(NavigationNode destination){
		linksToDestination = Model.getShortestPathLink(currentNode, destination);
	}
	
	/**
	 * @return the linksToDestination
	 */
	public List<NavigationLink> getLinksToDestination() {
		return linksToDestination;
	}

//	/**
//	 * @param linksToDestination the linksToDestination to set
//	 */
//	public void setLinksToDestination(List<NavigationLink> linksToDestination) {
//		this.linksToDestination = linksToDestination;
//	}
	
}
